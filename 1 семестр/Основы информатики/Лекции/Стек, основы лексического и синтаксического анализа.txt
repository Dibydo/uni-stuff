Вычисления на стеке, конкатенативное программирование

Конкатенативное программирование - парадигма программирования, в которой композиция функций выражается через конкатенацию строк. Примеры языков: FORTH, Joy, Factor.

Т.е. пусть у нас есть две программы 'P1' и 'Р2', конкатенация этих двух программ 'Р1 Р2' будет выражать применение 'Р2' к результату вычисления 'Р1'.

В конкатенативных языках явных переменных нет, данные передаются неявно, через стек. Программа представляет собой последовательность операторов, каждый из которых выполняет какую-либо операцию со стеком. Частный случай: константы - это тоже операторы, которые на стек кладут соответствующее значение.

В конкатенативных языках программирования принято записывать стек, растущий слева направо, причем верхушка стека расположена справа.

Действия операторов принято записывать как

	оператор : ... стек до => ... стек после

Например:

	+ : ... x y => ... (x+y)

Программа пишется в обратной польской записи или постфиксной записи: сначала записываются операнды, а потом сама операция.

Местность (арность) операции, функции - количество операндов (аргументов) у неё.

Поскольку местность каждой операции фиксирована, скобки не нужны.

Пример.

Выражение в обычной (инфиксной записи):

	(2-1)*(3+4)

Выражение в постфиксной записи (обратной польской):

	2 1 - 3 4 + *

* Аргументы операции '-': '2' и '1',
* Аргументы операции '+': '3' и '4',
* аргументы операции '*': '2 1 -', '3 4 *'.

Можно добавить скобки для наглядности, но их обычно не используют:

	((2 1 -) (3 4 +) *)

Местность констант 0 (не принимают аргументов), коменстность - 1.

	константа: ... => ... константа

Обратная польская запись допускает простую и эффектиную реализацию:

* в цикле читаем очередную операцию,
* снимаем со стека соответствующее количество аргументов операции,
* выполняем операцию
* кладем на стек её результаты.

...(Рисунок операции)...

Как выполняются вызовы функций в стековом языке программирования
----------------------------------------------------------------

Функции в FORTH принято называть статьями, хранилище функций - словарем.

Программа на языке FORTH состоит из последовательности слов, словом может быть или целочисленная константа, или некоторое имя. Часть слов предопределены (встроены в язык), часть определяются пользователем+ в виде статей:

Определение статьи выглядит так

	:ИМЯ слова... .

Знак ':' начинает определение, знак '.' - заканчивает.

Для вызовов функций вводизтся второй стке - стек возвратов. В осн. стеке, стеке данный, находятся значения, которыми обмениваются операции, в классическом FORTH это целые числа. В стеке возвратоа хранятся адреса команд в словарных статьях.

Интерпретатор работает в следующем цикле:

* Если в статье слова не кончились, читается очередное слово.
	* Если слово есть в словаре, адрес следующего слова кладется на стек возвратов, управление передается на первое слово словарной статьи.
	* Если нет в словаре и слово является записью целого числа, то число кладется на стек данных.
	* Если слова нет в словаре и оно не является записью числа - ОШИБКА.
* Еслм слова в статье кончились - со стека возвратов снимается адрес следующего слва и передается на него управление.

Некоторые встроенные слова FORTH: 

* Арифметика: '+', '-', '*', '/'.
* Слова работа со стеком:

	DUP: ...x => ... x x		дублирует верхушку стека
	DROP: ... x => ...		удаляет слово с верхушки стека
	SWAP: ... x y => ... y x		обменивает местами два слова на верхушке
	ROT: ... x y z => ... y z x		поднимает на верхушку третий по счету элемент
	OVER: ... x y => ... x y x		копирует подвершину на верхушку

* Управляющие конструкции
	* 'IF ... THEN' - если на вершине не ноль, выполняются слова между 'IF' и 'THEN'.
	* 'IF ... ELSE ... THEN'
	* 'WHILE ... WEND ...'

/////////////////////////////////////////

Основы лексического и синтаксического анализа
=============================================

Формальная грамматика - это способ описания синтаксиса языков программирования.

Мы будем рассматривать не все языки программирования, а только контекстно-свободные и регулярные (автоматные).

Формальная грамматика - набор правил, позволяющих породить строку, принадлежащую данному языку программирования. Формальная грамматика состоит их аксиомы, множества терминальных символов, множества нетерминальных символов и множества правил грамматики.

Терминальные символы - символы алфавита, из которых строятся строки данного языка программирования. Для стадии лексического анализа (грамматики токенов) терминальные символы - литеры (characters) текста. Для стадии синтаксического анализа терминальные символы - токены.

Нетерминальные символы - символы, которые раскрывются согласно правилам грамматики.

В синтаксичческом дереве терминальные символы соотв. листьям, нетерминальные - внутрю узлам.

Аксиома грамматики - нетерминальный символ, выбранный в качестве стартового.

Правила грамматики описывают, как в строке символов (терминальных и нетерминальных) раскрываются нетерминальные символы.

Порождение строки, принадлежащей языку, начинается с аксиомы, заканчивается цепочой терминальных символов.

Контекстно-свободные языки - языки, правила грамматик которых описываются выражением вида.
	
	Х => a b c ...

где 'X' - нетерминальный символ, 'a', 'b', 'c' - некоторые символы грамматики.

Грамматика арифметических выражений:

* аксиома F,
* терминальные символы: + * n(некоторое число), (..., ...)
* нетерминальные символы: E T F.

E => T
E => E + T
T => F
T => T * F
F => n
F => (E)

Часто правила с общими левыми частями (нетерминалами) объединяют, разделяя варианты знаком I(должна быть прямая палочка).

	E => T I E + T
	T => F I T * F
	F => n I ( E )

Пример вывода в этой грамматике:

...

Задача синтаксического анализа - имеем цепочку нетерминальных символов, нужно построить дерево разбора, соответствующее этой цепочке или показать, что такового не существует - цепочка не принадлежит данному языку.
Т.е. для некоторой грамматики и некоторой строки определить, принадлежит лт данная строка языку, описываемому данной грамматикой.

Способы описания грамматики
---------------------------
Форма Бекуса-Наура - способ описания грамматики, где правила имеют вид

	<Нетерминал> ::= альтернатива | ... | альтернатива

нетерминалы записываются в угловых скобках, терминальные символы записываются или сами собой, или словами БОЛЬШИМИ БУКВАМИ.
Альтернативные варианты разделяются знаками '|'.

Пример:

	<Выражение> ::= <Слагаемое> | <Выражение> + <Слагаемое>

Впервые она была использована при описании Алгола-60.

При описании многих языков программирования (в учебниках, стандартах) используется тот или иной вариант БНФ. Нотация может быть расширена такими обозначениями как '*' или '+' после нетерминала, означающие повторение ноль  или более раз или один или более раз данного нетерминала.

Как правило, если записана грамматика языка программирования, то под аксиомой ...

Метод рекурсивного спуска - способ написания синтаксических анализаторов для LL(1)-грамматик на алгоритмических языках программирования. Для каждого нетерминала грамматики записывается процедура, тело которой выводится из правил для данного нетерминала.

Построенный синтаксический анализатор выдает сообщение о принадлежности входной строки к заданному языку.

Написание синтаксичемкого анализатора состоит их этапов: 

1. Составление LL(1)-грамматики для данного языка программировагия.
2. Формальное выведение парсера из правил грамматики. Парсер либо молча