(define (pack lst)
  (if (not (null? lst)) 
      (cons (pod-pack lst) (pack (delete lst (pod-pack lst)))) 
      (list)))   
(define (pod-pack lst)
   (cond ((null? lst) (list))
         ((null? (cdr lst)) (append (cons (car lst) '()) (pod-pack (cdr lst))))
         ((equal? (car lst) (car (cdr lst))) (cons (car lst) (pod-pack (cdr lst))))
         (else 
          (begin 
            (cons (car lst) (list)))))) 
(define (delete a b)
  (cond ((null? b) a)
        ((null? a) b)
        (else (delete (cdr a) (cdr b)))))
(define (mini-encode a)
  (cond ((null? a) (list))
        (else (list (car a) (length (pod-pack a))))))
(define (encode a)
  (if (not (null? a)) 
      (cons (mini-encode a) (encode (delete a (pod-pack a)))) 
      (list)))
(define (unpack a)
  (if (not (null? a)) 
      (cons (pod-pack a) (pack (delete a (pod-pack a)))) 
      (list)))
(define b 0)
(define (mini-unpack a b)
  (cond ((= b 0) (list)) 
        (else (cons a (mini-unpack a (- b 1))))))
(define (unpack a)
  (if (not (null? a)) 
      (cons (mini-unpack (car (car a)) (car (cdr (car a)))) (unpack (cdr a))) 
      (list)))
(define (decode lst)
  (if (not (null? lst))
      (append (append (mini-unpack (car (car lst)) (car (cdr (car lst))))) (decode (cdr lst)))
      (list)))
