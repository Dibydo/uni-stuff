(define j -1)
(define i 0)
(define s 1)
(define (find-way lst i j d)
  (cond ((= d 2) (cons (list i j) (list)))
        ((and (< i (- (length lst) 1)) (= (cell-list lst (+ i 1) j) (- d 1))) (cons (list i j) (find-way lst (+ i 1) j (- d 1))))
        ((and (> i 0) (= (cell-list lst (- i 1) j) (- d 1))) (cons (list i j) (find-way lst (- i 1) j (- d 1))))
        ((and (< j (- (length (list-ref lst 0)) 1)) (= (cell-list lst i (+ j 1)) (- d 1))) (cons (list i j) (find-way lst i (- j 1) (- d 1))))
        ((and (> j 0) (= (cell-list lst i (- j 1)) (- d 1))) (cons (list i j) (find-way lst i (- j 1) (- d 1))))))
(define (wave lst i j d)
  (if (= (cell-list lst i j) d)
      (begin
        (if (and (< i (- (length lst) 1)) (= (cell-list lst (+ i 1) j) 1))
            (list-set! (list-ref lst (+ i 1)) j (+ d 1)))
        (if (and (> i 0) (= (cell-list lst (- i 1) j) 1)) 
            (list-set! (list-ref lst (- i 1)) j (+ d 1)))
        (if (and (< j (- (length (list-ref lst 0)) 1)) (= (cell-list lst i (+ j 1)) 1)) 
            (list-set! (list-ref lst i) (+ j 1) (+ d 1)))
        (if (and (> j 0) (= (cell-list lst i (- j 1)) 1)) 
            (list-set! (list-ref lst i) (- j 1) (+ d 1)))))
  (if (and (= i (- (length lst) 1)) (= j (- (length (list-ref lst 0)) 1))) 
      (set! d (+ d 1)))
  (find lst d))
(define (my-list lst)
  (cond ((null? lst) (list))
        (else (cons (vector->list (car lst)) (my-list (cdr lst))))))
(define (cell field i j)
  (vector-ref (vector-ref field  i) j))
(define (cell-list lst i j)
  (list-ref (list-ref lst i) j))
(define (list-set! list k val)
  (if (zero? k)
      (set-car! list val)
      (list-set! (cdr list) (- k 1) val)))
(define (find-path field)
  (let* ((lst (my-list (vector->list field0))))
    (find lst 2)))
(define (find lst d)
  (list-set! (list-ref lst 0) 0 2)
  (set! j (+ j 1))
  (if (= j (length (list-ref lst 0))) 
      (begin
        (set! j 0)
        (set! i (+ i 1))))
  (cond ((> (cell-list lst (- (length lst) 1) (- (length (list-ref lst 0)) 1)) 1) (reverse (find-way lst (- (length lst) 1) (- (length (list-ref lst 0)) 1) (+ d 1))))
        ((= s d) (wave lst i j d))
        (else 
         (begin 
           (set! s d) 
           (set! i 0) 
           (set! j 0) 
           (wave lst i j d)))))
