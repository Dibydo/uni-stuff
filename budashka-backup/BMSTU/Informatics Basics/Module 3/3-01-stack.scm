(define (compute . args)
  (define (f stack stack1 xs)
  (cond ((and (and (not (null? xs)) (null? stack1)) (number? (car xs))) (f (cons (car xs) stack) '() (cdr xs)))
        ((and (and (not (null? xs)) (not (null? stack1))) (number? (car xs))) (f (cons (car xs) stack) stack1 (cdr xs)))
        ((and (not (null? xs)) (null? stack1)) (f '() (cons (apply (car xs) stack) '()) (cdr xs)))
        ((and (not (null? stack1)) (not (null? stack)) (= (length stack) 1) (= (length stack1) 1)) (f '() (cons (apply (car xs) (append stack stack1)) '()) (cdr xs)))
        ((not (null? xs)) (f (cons (apply (car xs) stack) '()) stack1 (cdr xs)))
        (else (car stack1))))
  (f '() '() args))
