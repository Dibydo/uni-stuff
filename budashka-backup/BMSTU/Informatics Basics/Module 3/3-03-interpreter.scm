(define (head stack)
  (list (cadr stack) (car stack)))

(define (exist? name voc)
  (if (null? voc) (= 1 2)
      (if (equal? name (car (car voc))) (= 1 1) (exist? name (cdr voc)))))

(define (adr name voc)
  (if (equal? name (car (car voc))) (cadr (car voc)) (adr name (cdr voc))))

(define (endif-search start vector)
  (if (equal? (vector-ref vector start) 'endif)
      start (endif-search (+ start 1) vector)))
(define (end-search start vector)
  (if (equal? (vector-ref vector start) 'end)
      start
      (end-search (+ start 1) vector)))

(define (modif a stack)
  (cond((equal? 'mod a) (cons (apply modulo (head stack)) (cddr stack)))
       ((equal? 'neg a) (cons (* (car stack) -1) (cdr stack)))
       ((equal? '* a) (cons(apply * (head stack)) (cddr stack)))
       ((equal? '/ a) (cons(apply quotient (head stack)) (cddr stack)))
       ((equal? '- a) (cons(apply - (head stack)) (cddr stack)))
       ((equal? '+ a) (cons(apply + (head stack)) (cddr stack)))
       ((equal? '= a) (cons(if (apply = (head stack)) -1 0) (cddr stack)))
       ((equal? '< a) (cons(if (apply < (head stack)) -1 0) (cddr stack)))
       ((equal? '> a) (cons(if (apply > (head stack)) -1 0) (cddr stack)))
       ((equal? 'not a) (cons(if (= -1 (car stack)) 0 -1) (cdr stack)))
       ((equal? 'and a) (cons(if (and (= (cadr stack) (car stack)) (= (car stack) -1)) -1 0) (cddr stack)))
       ((equal? 'or a) (cons(if (and (= (cadr stack) (car stack)) (= (car stack) 0)) 0 -1) (cddr stack)))
       ((equal? 'dup a) (cons(car stack) stack))
       ((equal? 'swap a) (append(head stack) (cddr stack)))
       ((equal? 'drop a) (cdr stack))
       ((equal? 'over a) (cons(car (cdr stack)) stack))
       ((equal? 'rot a) (cons(caddr stack) (cons (cadr stack) (cons (car stack) (cdddr stack)))))
       ((equal? 'depth a) (cons(length stack) stack))
       (else '())))

(define (interpret code-vector stack)
  (define (main count vs rs voc)
    (if (<= (vector-length code-vector) count) vs
        (let ((main-value (vector-ref code-vector count)))
          (cond ((integer? main-value) (main (+ count 1) (cons main-value vs) rs voc))
                ((equal? 'define main-value) (main (+ (end-search count code-vector) 1) vs rs (cons (list (vector-ref code-vector (+ 1 count)) (+ count 2)) voc)))
                ((exist? main-value voc) (main (adr main-value voc) vs (cons (+ count 1) rs) voc))               
                ((and (equal? 'if main-value) (equal? (car vs) 0)) (main (+ (endif-search count code-vector) 1) (cdr vs) rs voc))
                ((equal? 'if main-value) (main (+ count 1) (cdr vs) rs voc))              
                ((equal? 'end main-value) (main (car rs) vs (cdr rs) voc))
                ((equal? 'exit main-value) (main (car rs) vs (cdr rs) voc))               
                ((equal? 'endif main-value) (main (+ count 1) vs rs voc))               
                (else (main (+ count 1) (modif main-value vs) rs voc)))))) 
  (main 0 stack '() '()))
