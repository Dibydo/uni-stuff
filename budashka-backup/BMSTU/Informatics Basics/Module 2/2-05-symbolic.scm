(define (factorize expr)
  (if (and (= (length expr) 3) (= (caddr (cadr expr)) 3) (= (caddr (caddr expr)) 3) (equal? (car expr) '-))
      (factorize-3 expr)
      (if (and (= (length expr) 3) (= (caddr (cadr expr)) 3) (= (caddr (caddr expr)) 3) (equal? (car expr) '+))
          (factorize+3 expr)
          (if (and (= (length expr) 3) (= (caddr (cadr expr)) 2) (= (caddr (caddr expr)) 2) (equal? (car expr) '-))
              (factorize-2 expr)))))
(define (factorize-3 expr)
  (let ((a (cadr (cadr expr)))
        (b (cadr (caddr expr))))
    (list '* (list '- a b) (list '+ (list 'expt a 2) (list '* a b) (list 'expt b 2)))))
(define (factorize+3 expr)       
  (let ((a (cadr (cadr expr)))
        (b (cadr (caddr expr))))
    (list '* (list '+ a b) (list '+ (list 'expt a 2) (list '- (list '* a b)) (list 'expt b 2)))))
(define (factorize-2 expr)             
  (let ((a (cadr (cadr expr)))
        (b (cadr (caddr expr))))
    (list '* (list '- a b) (list '+ a b))))
            
      
