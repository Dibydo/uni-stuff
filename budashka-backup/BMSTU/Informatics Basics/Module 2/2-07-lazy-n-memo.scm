(use-syntax (ice-9 syncase))
(define memoized-factorial
  (let ((memo '()))
    (lambda (n)
      (let ((memoized (assq n memo)))
        (if (not (equal? memoized #f))
            (cadr memoized)
            (let ((new-value
                   (if (< n 1)
                       1
                       (* n (memoized-factorial (- n 1))))))
              (set! memo (cons (list n new-value) memo))
              new-value))))))
(define-syntax lazy-cons
  (syntax-rules ()
    ((_ a b) (cons a (delay b)))))
(define (lazy-car p)
  (car p))
(define (lazy-cdr p)
  (force (cdr p)))
(define (lazy-head xs k)
  (if (zero? k)
      '()
      (cons (lazy-car xs) (lazy-head (lazy-cdr xs) (- k 1)))))
(define (naturals n)
  (lazy-cons n (naturals (+ n 1))))
(define (factorial a)
  (lazy-cons (fact a) (factorial (+ a 1))))
(define (fact a)
(let fac ((n a))
  (if (zero? n)
      1
      (* n (fac (- n 1))))))  
(define (lazy-factorial+ n)
  (lazy-head (factorial 0) (+ n 1)))
(define (lazy-factorial n)
  (lazy-car (reverse (lazy-factorial+ n))))
