(use-syntax (ice-9 syncase))
(define-syntax lazy-cons
  (syntax-rules ()
    ((_ a b) (cons a (delay b)))))
(define (lazy-car p)
  (car p))
(define (lazy-cdr p)
  (force (cdr p)))
(define (lazy-head xs k)
  (if (zero? k)
      '()
      (cons (lazy-car xs) (lazy-head (lazy-cdr xs) (- k 1)))))
(define (naturals+ n)
  (lazy-cons n (naturals+ (+ n 1))))
(define naturals (naturals+ 0))
(define (lazy-map op . xs)
  (if (not (= (length xs) 1))
      (lazy-cons (op (car (map lazy-car xs)) (car (reverse (map lazy-car xs))))  (apply lazy-map op (map lazy-cdr xs)))
      (lazy-cons (op (car (map lazy-car xs)))  (apply lazy-map op (map lazy-cdr xs)))))
(define (lazy-filter pred? xs)
  (if (pred? (lazy-car xs))
      (lazy-cons (lazy-car xs) (lazy-filter pred? (lazy-cdr xs)))
      (lazy-filter pred? (lazy-cdr xs))))

