(define (derivative expr)
  (cond ((null? expr) '())
        ((number? expr) 0)
        ((symbol? expr) 1)
        ((equal? (car expr) '+) (derivate+ expr))
        ((and (equal? (car expr) '-) (null? (cddr expr)) (number? (derivative (cadr expr)))) (- (derivative (cadr expr))))
        ((and (equal? (car expr) '-) (null? (cddr expr)) (not (number? (cadr expr)))) (derivate- expr))
        ((and (equal? (car expr) '-) (not (null? (cddr expr)))) (derivate-- expr))
        ((and (equal? (car expr) '*) (= (length expr) 3) (number? (cadr expr)) (list? (caddr expr))) (derivate*3n expr))
        ((and (equal? (car expr) '*) (= (length expr) 3) (number? (cadr expr)) (not (list? (caddr expr)))) (* (cadr expr) (derivative (caddr expr))))
        ((and (equal? (car expr) '*) (= (length expr) 3) (list? (cadr expr)) (list? (caddr expr))) (derivate*3 expr))
        ((and (equal? (car expr) '*) (> (length expr) 3) (number? (cadr expr)) (derivate*4n expr)))
        ((and (equal? (car expr) '*) (> (length expr) 3) (list? (cadr expr)) (list? (caddr expr))) (derivate*4 expr)) 
        ((and (equal? (car expr) '/) (number? (cadr expr))) (derivate/n expr))
        ((and (equal? (car expr) '/) (list? (cadr expr))) (derivate/ expr))
        ((and (equal? (car expr) 'expt) (number? (cadr expr)) (list? (caddr expr))) (expt1 expr))
        ((and (equal? (car expr) 'expt) (number? (cadr expr)) (not (list? (caddr expr)))) (expt2 expr))
        ((and (equal? (car expr) 'expt) (list? (cadr expr))) (exptl expr))
        ((and (equal? (car expr) 'expt) (not (list? (cadr expr)))) (exptn expr))
        ((and (equal? (car expr) 'sin) (list? (cadr expr))) (sinl expr))
        ((and (equal? (car expr) 'sin) (not (list? (cadr expr)))) (list 'cos (cadr expr)))
        ((and (equal? (car expr) 'cos) (list? (cadr expr))) (cosl expr)) 
        ((and (equal? (car expr) 'cos) (not (list? (cadr expr)))) (list '- (list 'sin (cadr expr))))
        ((and (equal? (car expr) 'tan) (list? (cadr expr))) (tanl expr))
        ((and (equal? (car expr) 'tan) (not (list? (cadr expr)))) (list '/ 1 (list 'expt (list 'cos (cadr expr)) 2)))
        ((and (equal? (car expr) 'exp) (list? (cadr expr))) (expl expr))
        ((and (equal? (car expr) 'exp) (not (list? (cadr expr)))) (list 'exp (cadr expr)))
        ((and (equal? (car expr) 'log) (list? (cadr expr))) (logl expr))
        ((and (equal? (car expr) 'log) (not (list? (cadr expr)))) (list '/ 1 (cadr expr)))))
(define (derivate+ expr)
  (cons '+ (map derivative (cdr expr))))
(define (derivate- expr)
  (list '- (derivative (cadr expr))))
(define (derivate-- expr)
  (cons '- (map derivative (cdr expr))))
(define (derivate*3n expr)
  (list '* (cadr expr) (derivative (caddr expr))))
(define (derivate*3 expr)
  (list '+ (list '* (caddr expr) (derivative (cadr expr))) (list '* (cadr expr) (derivative (caddr expr)))))
(define (derivate*4n expr)
  (list '* (cadr expr) (derivative (cons '* (cddr expr)))))
(define (derivate*4 expr)
  (list '+ (list '* (derivative (list '* (caddr expr) (cadr expr))) (cadddr expr)) (list '* (derivative (cadddr expr)) (list '* (caddr expr) (cadr expr)))))
(define (derivate/n expr)
  (list '* (cadr expr) (derivative (list 'expt (caddr expr) -1))))
(define (derivate/ expr)
  (list '/ (list '- (list '* (derivative (cadr expr)) (caddr expr)) (list '* (derivative (caddr expr)) (cadr expr))) (list 'expt (caddr expr) 2)))
(define (expt1 expr)
  (list '* (list '* (list 'expt (cadr expr) (caddr expr)) (list 'log (cadr expr))) (derivative (caddr expr))))
(define (expt2 expr)
  (list '* (list 'expt (cadr expr) (caddr expr)) (list 'log (cadr expr))))
(define (exptl expr)
  (list '* (list '* (caddr expr) (list 'expt (cadr expr) (if (list? (caddr expr)) (list '- (caddr expr) 1) (- (caddr expr) 1)))) (derivative (cadr expr))))
(define (exptn expr)
  (list '* (caddr expr) (list 'expt (cadr expr) (if (list? (caddr expr)) (list '- (caddr expr) 1) (- (caddr expr) 1)))))
(define (sinl expr)
  (list '* (list 'cos (cadr expr)) (derivative (cadr expr))))
(define (cosl expr)
  (list '* (list '- (list 'sin (cadr expr))) (derivative (cadr expr))))
(define (tanl expr)
  (list '* (list '/ 1 (list 'expt (list 'cos (cadr expr)) 2)) (derivative (cadr expr))))
(define (expl expr)
  (list '* (list 'exp (cadr expr)) (derivative (cadr expr))))
(define (logl expr)
  (list '* (list '/ 1 (cadr expr)) (derivative (cadr expr)))) 
