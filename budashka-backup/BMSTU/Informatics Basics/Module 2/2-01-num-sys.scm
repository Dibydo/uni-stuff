(define (certain->decimal-help s b)
  (if (not (null? (string->list s)))
      (if (or (> (- (char->integer (car (string->list s))) 97) 0) (= (- (char->integer (car (string->list s))) 97) 0))
          (cons (- (char->integer (car (string->list s))) 87) (certain->decimal-help (list->string (cdr (string->list s))) b))
          (if (or (> (- (char->integer (car (string->list s))) 65) 0) (= (- (char->integer (car (string->list s))) 65) 0))
              (cons (- (char->integer (car (string->list s))) 55) (certain->decimal-help (list->string (cdr (string->list s))) b))
              (cons (- (char->integer (car (string->list s))) 48) (certain->decimal-help (list->string (cdr (string->list s))) b))))
      '()))
(define i -1)
(define (certain->decimal s b)
  (if (not (null? (string->list s)))
      (if (not (or (> (car (certain->decimal-help (list->string (cons (car (string->list s)) '())) b)) b) (= (car (certain->decimal-help (list->string (cons (car (string->list s)) '())) b)) b)))
          (begin
            (set! i (+ i 1))
            (+ (* (car (certain->decimal-help (list->string (cons (car (reverse (string->list s))) '())) b)) (expt b i)) (certain->decimal (list->string (reverse (cdr (reverse (string->list s))))) b)))
           'number-conversion-error)
      0))
(define (correct-number? s b)
  (define m (string->list s))
  (if (not (null? m))
      (if (> (car (certain->decimal-help (list->string (cons (car m) '())) b)) b)
          (= 1 2)
          (correct-number? (list->string (cdr (string->list s))) b))
      (= 1 1)))                                  
(define (decimal->certain-help d b)
  (if (or (> (quotient d b) 0) (> (remainder d b) 0))
      (if (or (> (remainder d b) 10) (= (remainder d b) 10))
          (append (cons (integer->char (+ 55 (remainder d b))) '()) (decimal->certain-help (quotient d b) b))
          (append (cons (integer->char (+ 48 (remainder d b))) '()) (decimal->certain-help (quotient d b) b)))             
      '()))
(define (decimal->certain d b)
  (list->string (reverse (decimal->certain-help d b))))
