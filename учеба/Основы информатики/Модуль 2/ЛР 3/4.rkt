(define (factorize xs)
  (let ((sign (car xs))
        (b (cadr (caddr xs)))
        (a (cadr (cadr xs)))
        (degree (caddr (cadr xs))))
    (if (equal? '+ sign)
        (list '* (list '+ a b)
              (list '+ (list 'expt a 2)
                    (list 'expt b 2)
                    (list '* a b)))
        (if (and (equal? '- sign) (not (equal? degree 2)))
            (list '* (list '- a b)
                  (list '+ (list 'expt a 2)
                        (list '* a b)
                        (list 'expt b 2)))
            (list '* (list '- a b) (list '+ a b))))))

; (factorize '(- (expt x 2) (expt y 2)))
; (factorize '(- (expt (+ first 1) 2) (expt (- second 1) 2)))
; (eval (list (list 'lambda 
;                     '(x y) 
;                     (factorize '(- (expt x 2) (expt y 2))))
;               1 2)
;         (interaction-environment))