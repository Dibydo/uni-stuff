(define (rеf xs index elem)
  (define (get-type xs)
    (cond ((vector? xs) 'vector)
          ((string? xs) 'string)
          (else 'list)))
  (define (ref-insert xs index new)
    (if (eq? index 0)
        (append (append new (list elem)) xs)
        (if (not (null? (cdr xs)))
            (ref-insert (cdr xs) (- index 1) (append new (list (car xs))))
            (not (null? (cdr xs))))))
  (define (translate xs)
    (cond ((vector? xs) (vector->list xs))
          ((string? xs) (string->list xs))
          (else xs)))
  (define (list-of-char? xs status) 
    (if (null? xs)
        status
        (list-of-char? (cdr xs) (and (char? (car xs)) status))))
  (define (re-translate xs type)
    (cond ((eq? type 'vector) (list->vector xs))
          ((eq? type 'string) 
             (if (list-of-char? xs #t)
                 (list->string xs)
                 (= 1 2)))
          (else xs)))
  (let ((buf (ref-insert (translate xs) index '())))
    (if (not buf)
        buf
        (re-translate buf (get-type xs)))))

(define (ref xs index)
  (define (ref-help xs index)
    (if (eq? index 0)
        (car xs)
        (if (not (null? (cdr xs)))
            (ref-help (cdr xs) (- index 1))
            (not (null? (cdr xs))))))
  (define (translate xs)
    (cond ((vector? xs) (vector->list xs))
          ((string? xs) (string->list xs))
          (else xs)))
  (ref-help (translate xs) index))

;tests
;(ref '(1 2 3) 1) ⇒ 2
;(ref #(1 2 3) 1) ⇒ 2
;(ref "123" 1)    ⇒ #\2
;(ref "123" 3)    ⇒ #f

;(rеf '(1 2 3) 1 0)   ⇒ (1 0 2 3)
;(rеf #(1 2 3) 1 0)   ⇒ #(1 0 2 3)
;(rеf #(1 2 3) 1 #\0) ⇒ #(1 #\0 2 3)
;(rеf "123" 1 #\0)    ⇒ "1023"
;(rеf "123" 1 0)      ⇒ #f
;(rеf "123" 3 #\4)    ⇒ "1234"
;(rеf "123" 5 #\4)    ⇒ #f